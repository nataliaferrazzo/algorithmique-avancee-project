Compte Rendu projet Algorithimique avancee:

Introduction:
We chose to develop our project by programming with C language because it's one of the two languages (with ocaml) that we already used for previous project which needed to create our own structures.
Futhermore the use of pointers fits very well with the need to rely each node or tree to their children. The first issue we thought about after choosing this language is that we will have to handle the memory directly in the code which can add some difficulties.   
The version of the compiler i am using is : gcc version 6.3.0 20170516 (Debian 6.3.0-18+deb9u1)

Question 1.1:
Our first idea to get the end of a word was to take the first element of the ascii table which is null. But actually after trying to convert the text to a new format with the separation with space we saw that the good element to take was '\n'.

Question 3.7:
To merge two Patricia trees the main steps are:
    1- Count the number of words in one of the tree
    2- Create a list of char* of this size 
    3- Put all the words of one tree in a list
    4- Insert one by one the words of the list in the other Patricia tree.

There is maybe a better way to do it by comparing directly the prefixes but the implementations would be harder, as we already the fonctions to do the described method.

Question 4.9 :
For each fonction the complexity will be based on the number of comparaison done in the fonction.

    SearchPatricia(tree, word): complexity of searchPatricia function is O(n), where n is the length of the input word.
This accounts for the compact representation of prefixes which allows us, after only one comparaison in the previous children, to find the one where there is a common prefixe.
    countWords(root):

    hauteur(tree):
complexity for this fonction is the number of node in the tree as we have to go throught each one o find which branch is the biggest.

ListeMots(tree):

ComptageNil(tree):

ProfondeurMoyenne(tree):

Prefixe(tree, word):

Suppression(tree, word):

















